#pragma once
#include <stdint.h>

#define MOVES_ARRAY_LENGTH 240
#define TURN_BIT UINT64_C(0b10)
#define A8 UINT64_C(0x8000000000000000)

#define EXACT = 0
#define UPPER_BOUND = 1
#define LOWER_BOUND = 2

// RANK AND FILES
enum RANK_MASKS{
  RANK_1 = UINT64_C(0x00000000000000FF),
  RANK_2 = UINT64_C(0x000000000000FF00),
  RANK_3 = UINT64_C(0x0000000000FF0000),
  RANK_4 = UINT64_C(0x00000000FF000000),
  RANK_5 = UINT64_C(0x000000FF00000000),
  RANK_6 = UINT64_C(0x0000FF0000000000),
  RANK_7 = UINT64_C(0x00FF000000000000),
  RANK_8 = UINT64_C(0xFF00000000000000)
};

enum FILE_MASKS{
  FILE_A = UINT64_C(0x8080808080808080),
  FILE_B = UINT64_C(0x4040404040404040),
  FILE_C = UINT64_C(0x2020202020202020),
  FILE_D = UINT64_C(0x1010101010101010),
  FILE_E = UINT64_C(0x0808080808080808),
  FILE_F = UINT64_C(0x0404040404040404),
  FILE_G = UINT64_C(0x0202020202020202),
  FILE_H = UINT64_C(0x0101010101010101)
};

// PIEQCE SQUARE TABLES
extern const int16_t mg_piece_table[];
extern const int16_t eg_piece_table[];  
extern const int16_t mg_to_eg_values[];

// MOVE GENERATION
extern const uint64_t KING_MOVES[];  
extern const uint64_t KNIGHT_MOVES[];  
extern const unsigned char SLIDING_MOVES[];  

// BOARD CONSTANTS
extern const uint64_t DIAGS_UP[];  
extern const uint64_t DIAGS_DOWN[];  
extern const uint64_t RANKS[];
extern const uint64_t FILES[];

// HELPERS
extern const char* SQUARES[64];
extern const char PIECE_NAMES[15][15];
extern const char PIECE_CODES[];
extern const char MOVE_TYPES[4][17];

// STRUCTS AND ENUMS

enum PIECE_INDEX{
  WHITE_PAWN,
  WHITE_KNIGHT,
  WHITE_BISHOP,
  WHITE_ROOK,
  WHITE_QUEEN,
  WHITE_KING,
  BLACK_PAWN,
  BLACK_KNIGHT,
  BLACK_BISHOP,
  BLACK_ROOK,
  BLACK_QUEEN,
  BLACK_KING,
  WHITE_PCS,
  BLACK_PCS,
  INFO,
  BOARD_ARRAY_SIZE
};

enum CASTLING_RIGHTS{
  WHITE_KINGSIDE_SPACE = UINT64_C(0b110),
  WHITE_QUEENSIDE_SPACE = UINT64_C(0b01110000),
  BLACK_KINGSIDE_SPACE = UINT64_C(0b110) << 56,
  BLACK_QUEENSIDE_SPACE = UINT64_C(0b01110000) << 56,

  WHITE_KINGSIDE_ATTACKED = UINT64_C(0b1110),
  WHITE_QUEENSIDE_ATTACKED = UINT64_C(0b10111000),
  BLACK_KINGSIDE_ATTACKED = UINT64_C(0b1110) << 56,
  BLACK_QUEENSIDE_ATTACKED = UINT64_C(0b00111000) << 56,

  WHITE_KINGSIDE_RIGHT = UINT64_C(0b00001),
  WHITE_QUEENSIDE_RIGHT = UINT64_C(0b10000000),
  BLACK_KINGSIDE_RIGHT = UINT64_C(0b1) << 56,
  BLACK_QUEENSIDE_RIGHT = UINT64_C(0b10000000) << 56
};
// HELPERS